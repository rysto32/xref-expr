/* The following code was generated by JFlex 1.4.1 on 12/2/16 10:06 PM */

package xref_expr.scanner;

import java.util.*;
import java.util.regex.*;
import java.io.*;

import xref_expr.parser.*;
import lr_runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 12/2/16 10:06 PM from the specification file
 * <tt>/home/rstone/NetBeansProjects/xref_expr/src/xref_expr/scanner/scanner.lex</tt>
 */
public class Lexer implements lr_runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;
  public static final int CHAR = 2;
  private static final Map<Integer, String> stateNames;
static {
  stateNames = new HashMap<Integer, String>();
  stateNames.put(Integer.valueOf(1), "STRING");
  stateNames.put(Integer.valueOf(0), "YYINITIAL");
  stateNames.put(Integer.valueOf(2), "CHAR");
}

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\2\0\1\1\22\0\1\13\1\16\1\42\1\0"+
    "\1\12\1\25\1\14\1\51\1\20\1\21\1\4\1\33\1\24\1\15"+
    "\1\34\1\3\1\5\7\43\2\11\1\23\1\6\1\26\1\30\1\27"+
    "\1\22\1\0\1\7\1\101\1\102\1\7\1\50\1\7\2\12\1\103"+
    "\2\12\1\41\10\12\1\44\2\12\1\46\2\12\1\35\1\47\1\36"+
    "\1\31\1\73\1\0\1\52\1\60\1\64\1\70\1\62\1\71\1\72"+
    "\1\65\1\67\1\12\1\63\1\45\1\54\1\66\1\57\1\77\1\12"+
    "\1\61\1\53\1\56\1\55\1\100\1\75\1\10\1\76\1\74\1\37"+
    "\1\32\1\40\1\17\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\5\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\7\1\35"+
    "\1\7\1\1\1\36\17\7\1\37\1\40\3\37\1\41"+
    "\3\0\1\42\1\43\1\5\2\0\1\5\2\0\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\0\1\7\1\0\21\7\1\65\1\66\12\7\1\37"+
    "\1\0\1\5\2\67\1\0\1\70\1\71\1\72\1\7"+
    "\1\73\25\7\1\74\3\7\1\75\11\7\1\76\1\77"+
    "\16\7\1\100\1\101\1\102\2\7\1\103\4\7\1\104"+
    "\7\7\1\105\2\7\1\106\4\7\1\107\1\7\1\110"+
    "\4\7\1\111\4\7\1\112\2\7\1\113\2\7\1\114"+
    "\1\7\1\115\1\116\1\117\1\120\1\121\3\7\1\122"+
    "\1\7\1\123\1\7\1\124\1\125\7\7\1\126\3\7"+
    "\1\127\5\7\1\130\1\131\1\132\1\133\1\7\1\124"+
    "\1\134\1\7\1\135\3\7\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\314\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\314\0\314"+
    "\0\314\0\314\0\u0374\0\314\0\u03b8\0\u03fc\0\u0440\0\u0484"+
    "\0\u04c8\0\u050c\0\u0550\0\u0594\0\314\0\314\0\314\0\314"+
    "\0\u05d8\0\314\0\u061c\0\u0660\0\314\0\u06a4\0\u06e8\0\u072c"+
    "\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\314\0\u0ae4\0\u0b28"+
    "\0\u0b6c\0\314\0\u0bb0\0\u0bf4\0\u0c38\0\314\0\314\0\u0c7c"+
    "\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\u0e14\0\314\0\u0e58\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\u0e9c\0\u0ee0"+
    "\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u1364\0\u13a8\0\u0220\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\314\0\u16d8"+
    "\0\u171c\0\u1760\0\u17a4\0\u17a4\0\314\0\314\0\314\0\u17e8"+
    "\0\u0220\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4"+
    "\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u0220\0\u1dc0"+
    "\0\u1e04\0\u1e48\0\u0220\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u0220\0\u0220\0\u20f0\0\u2134"+
    "\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u2420\0\u2464\0\u0220\0\u0220\0\u0220\0\u24a8"+
    "\0\u24ec\0\u0220\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u0220\0\u2640"+
    "\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u0220\0\u281c"+
    "\0\u2860\0\u0220\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u0220\0\u29b4"+
    "\0\u0220\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u0220\0\u2b08\0\u2b4c"+
    "\0\u2b90\0\u2bd4\0\u0220\0\u2c18\0\u2c5c\0\u0220\0\u2ca0\0\u2ce4"+
    "\0\u0220\0\u2d28\0\u0220\0\u0220\0\u0220\0\u0220\0\u0220\0\u2d6c"+
    "\0\u2db0\0\u2df4\0\u0220\0\u2e38\0\u0220\0\u2e7c\0\u0220\0\u0220"+
    "\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u0220"+
    "\0\u309c\0\u30e0\0\u3124\0\u0220\0\u3168\0\u31ac\0\u31f0\0\u3234"+
    "\0\u3278\0\u0220\0\u0220\0\u0220\0\u0220\0\u32bc\0\u3300\0\u0220"+
    "\0\u3344\0\u0220\0\u3388\0\u33cc\0\u3410\0\u0220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\4\1\5\1\6\1\7\1\10\1\11\2\12\1\13"+
    "\1\12\1\5\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\13\1\12\1\43\1\12\1\44\1\12\1\45"+
    "\1\46\1\47\1\12\1\50\1\51\1\12\1\52\1\53"+
    "\1\54\1\12\1\55\2\12\1\56\1\57\1\60\1\61"+
    "\1\62\1\12\1\63\2\12\1\64\3\12\2\65\1\0"+
    "\37\65\1\66\4\65\1\67\34\65\2\70\1\0\44\70"+
    "\1\71\1\70\1\72\32\70\106\0\1\5\1\73\7\0"+
    "\1\5\73\0\1\74\1\75\23\0\1\76\103\0\1\77"+
    "\60\0\1\100\2\0\1\101\1\102\27\0\1\103\1\0"+
    "\1\100\2\103\1\101\1\104\1\105\4\0\1\103\4\0"+
    "\1\105\26\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\32\12\5\0\1\13\3\0"+
    "\1\13\27\0\1\103\1\0\1\13\2\103\1\0\1\104"+
    "\1\105\4\0\1\103\4\0\1\105\35\0\1\106\13\0"+
    "\1\107\70\0\1\110\11\0\1\111\1\112\103\0\1\113"+
    "\102\0\1\40\103\0\1\36\1\114\76\0\1\37\1\0"+
    "\1\35\1\115\1\0\1\116\102\0\1\117\1\120\103\0"+
    "\1\121\103\0\1\122\103\0\1\123\1\0\1\124\101\0"+
    "\1\125\2\0\1\126\104\0\1\127\54\0\1\12\1\0"+
    "\4\12\26\0\1\12\1\42\4\12\1\0\1\12\1\45"+
    "\32\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\5\12\1\130\24\12\2\131"+
    "\1\0\101\131\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\1\12\1\132\1\12"+
    "\1\133\26\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\4\12\1\134\6\12"+
    "\1\135\1\12\1\136\5\12\1\137\6\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\14\12\1\140\15\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\24\12"+
    "\1\141\5\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\7\12\1\142\22\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\10\12\1\143\21\12\5\0\1\12"+
    "\1\0\1\12\1\144\2\12\26\0\1\12\1\0\2\12"+
    "\1\145\1\12\1\0\1\12\1\0\14\12\1\146\15\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\1\147\4\12\1\150\5\12\1\151"+
    "\16\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\14\12\1\152\2\12\1\153"+
    "\12\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\5\12\1\154\2\12\1\155"+
    "\21\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\2\12\1\156\1\12\1\0\1\12\1\0\5\12\1\157"+
    "\24\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\5\12\1\160\24\12\5\0"+
    "\1\12\1\0\4\12\26\0\1\12\1\0\4\12\1\0"+
    "\1\12\1\0\21\12\1\161\5\12\1\162\1\163\1\164"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\13\12\1\165\16\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\5\12\1\166\24\12\2\65\1\0\37\65\1\0"+
    "\4\65\1\0\34\65\42\0\1\167\41\0\2\70\1\0"+
    "\44\70\1\0\1\70\1\0\32\70\51\0\1\167\35\0"+
    "\1\74\1\75\77\0\1\74\2\5\101\74\4\75\1\170"+
    "\77\75\5\0\1\100\3\0\1\102\27\0\1\103\1\0"+
    "\1\100\2\103\1\0\1\104\1\105\4\0\1\103\4\0"+
    "\1\105\26\0\1\171\1\0\1\171\1\0\1\171\31\0"+
    "\1\171\4\0\1\171\1\0\1\171\5\0\1\171\1\0"+
    "\1\171\1\0\1\171\3\0\2\171\7\0\2\171\6\0"+
    "\1\102\3\0\1\102\31\0\1\102\3\0\1\104\1\105"+
    "\11\0\1\105\62\0\1\103\2\0\2\103\7\0\1\103"+
    "\26\0\2\172\1\0\101\172\5\0\1\173\3\0\1\173"+
    "\3\0\1\174\15\0\1\174\7\0\1\173\70\0\1\175"+
    "\103\0\1\176\107\0\1\177\54\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\14\12"+
    "\1\200\15\12\5\0\1\172\3\0\1\172\31\0\1\172"+
    "\45\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\2\12\1\201\27\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\4\12\1\202\25\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\1\203"+
    "\6\12\1\204\22\12\5\0\1\12\1\0\4\12\26\0"+
    "\1\12\1\0\4\12\1\0\1\12\1\0\5\12\1\205"+
    "\24\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\20\12\1\206\1\12\1\207"+
    "\7\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\15\12\1\210\14\12\5\0"+
    "\1\12\1\0\4\12\26\0\1\12\1\0\4\12\1\0"+
    "\1\12\1\0\1\12\1\211\13\12\1\212\14\12\5\0"+
    "\1\12\1\0\4\12\26\0\1\12\1\0\4\12\1\0"+
    "\1\12\1\0\25\12\1\213\4\12\5\0\1\12\1\0"+
    "\4\12\26\0\1\12\1\0\4\12\1\0\1\12\1\0"+
    "\10\12\1\214\21\12\5\0\1\12\1\0\4\12\26\0"+
    "\1\12\1\0\4\12\1\0\1\12\1\0\1\12\1\215"+
    "\2\12\1\216\13\12\1\217\11\12\5\0\1\12\1\0"+
    "\4\12\26\0\1\12\1\0\4\12\1\0\1\12\1\0"+
    "\4\12\1\220\25\12\5\0\1\12\1\0\4\12\26\0"+
    "\1\12\1\0\4\12\1\0\1\12\1\0\1\12\1\221"+
    "\30\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\3\12\1\222\26\12\5\0"+
    "\1\12\1\0\4\12\26\0\1\12\1\0\4\12\1\0"+
    "\1\12\1\0\1\12\1\223\30\12\5\0\1\12\1\0"+
    "\4\12\26\0\1\12\1\0\4\12\1\0\1\12\1\0"+
    "\14\12\1\224\15\12\5\0\1\12\1\0\4\12\26\0"+
    "\1\12\1\0\4\12\1\0\1\12\1\0\1\225\31\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\2\12"+
    "\1\226\1\12\1\0\1\12\1\0\4\12\1\227\25\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\3\12\1\230\26\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\17\12\1\231\12\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\5\12"+
    "\1\232\24\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\7\12\1\233\22\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\4\12\1\234\25\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\1\12\1\235\13\12\1\236\14\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\5\12\1\237\24\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\5\12"+
    "\1\240\24\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\2\12\1\241\27\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\15\12\1\242\14\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\2\12\1\243\1\12"+
    "\1\0\1\12\1\0\15\12\1\244\14\12\3\75\1\5"+
    "\1\170\77\75\5\0\1\171\1\0\1\171\1\0\1\171"+
    "\27\0\1\103\1\0\1\171\2\103\2\0\1\171\1\0"+
    "\1\171\2\0\1\103\2\0\1\171\1\0\1\171\1\0"+
    "\1\171\3\0\2\171\7\0\2\171\6\0\1\172\3\0"+
    "\1\172\31\0\1\172\4\0\1\105\11\0\1\105\26\0"+
    "\1\173\3\0\1\173\31\0\1\173\45\0\1\12\1\0"+
    "\4\12\26\0\1\12\1\0\4\12\1\0\1\12\1\0"+
    "\20\12\1\245\11\12\5\0\1\12\1\0\4\12\26\0"+
    "\1\12\1\0\4\12\1\0\1\12\1\0\5\12\1\246"+
    "\24\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\4\12\1\247\25\12\5\0"+
    "\1\12\1\0\4\12\26\0\1\12\1\0\4\12\1\0"+
    "\1\12\1\0\3\12\1\250\26\12\5\0\1\12\1\0"+
    "\4\12\26\0\1\12\1\0\4\12\1\0\1\12\1\0"+
    "\7\12\1\251\22\12\5\0\1\12\1\0\4\12\26\0"+
    "\1\12\1\0\4\12\1\0\1\12\1\0\14\12\1\252"+
    "\15\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\10\12\1\253\21\12\5\0"+
    "\1\12\1\0\4\12\26\0\1\12\1\0\4\12\1\0"+
    "\1\12\1\0\4\12\1\254\25\12\5\0\1\12\1\0"+
    "\4\12\26\0\1\12\1\0\4\12\1\0\1\12\1\0"+
    "\15\12\1\255\14\12\5\0\1\12\1\0\4\12\26\0"+
    "\1\12\1\0\4\12\1\0\1\12\1\0\5\12\1\256"+
    "\24\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\10\12\1\257\21\12\5\0"+
    "\1\12\1\0\4\12\26\0\1\12\1\0\4\12\1\0"+
    "\1\12\1\0\1\260\31\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\4\12"+
    "\1\261\25\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\3\12\1\262\26\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\15\12\1\263\14\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\10\12\1\264\21\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\10\12"+
    "\1\265\21\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\2\12\1\266\27\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\10\12\1\267\21\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\1\12\1\270\2\12\1\271\25\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\7\12\1\272\22\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\15\12"+
    "\1\273\14\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\6\12\1\274\23\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\1\275\31\12\5\0\1\12\1\0"+
    "\4\12\26\0\1\12\1\0\4\12\1\0\1\12\1\0"+
    "\1\276\31\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\5\12\1\277\24\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\15\12\1\300\14\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\14\12\1\301\15\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\5\12"+
    "\1\302\24\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\2\12\1\303\27\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\1\304\31\12\5\0\1\12\1\0"+
    "\4\12\26\0\1\12\1\0\2\12\1\305\1\12\1\0"+
    "\1\12\1\0\32\12\5\0\1\12\1\0\4\12\26\0"+
    "\1\12\1\0\4\12\1\0\1\12\1\0\1\306\31\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\16\12\1\307\13\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\15\12\1\310\14\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\12\12"+
    "\1\311\17\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\4\12\1\312\25\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\10\12\1\313\21\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\5\12\1\314\24\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\12\12"+
    "\1\315\17\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\20\12\1\316\11\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\14\12\1\317\15\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\16\12\1\320\13\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\11\12"+
    "\1\321\20\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\7\12\1\322\22\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\7\12\1\323\22\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\1\12\1\324\30\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\7\12"+
    "\1\325\22\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\4\12\1\326\25\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\15\12\1\327\14\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\14\12\1\330\15\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\2\12\1\331\1\12\1\0\1\12"+
    "\1\0\32\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\3\12\1\332\26\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\4\12\1\333\25\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\20\12\1\334\11\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\2\12\1\335\1\12\1\0\1\12"+
    "\1\0\32\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\2\12\1\336\1\12\1\0\1\12\1\0\32\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\25\12\1\337\4\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\20\12\1\340\11\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\10\12"+
    "\1\341\21\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\4\12\1\342\25\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\12\12\1\343\17\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\4\12\1\344\25\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\16\12"+
    "\1\345\13\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\17\12\1\346\12\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\13\12\1\347\16\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\14\12\1\350\15\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\10\12"+
    "\1\351\21\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\15\12\1\352\14\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\14\12\1\353\15\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\4\12\1\354\25\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\14\12"+
    "\1\355\15\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\14\12\1\356\15\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\10\12\1\357\21\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\10\12\1\360\21\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\2\12\1\361\1\12\1\0\1\12"+
    "\1\0\32\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\14\12\1\362\15\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\15\12\1\363\14\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\2\12\1\364\1\12"+
    "\1\0\1\12\1\0\32\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\15\12"+
    "\1\365\14\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\15\12\1\366\14\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\10\12\1\367\21\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\17\12\1\370\12\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\12\12"+
    "\1\371\17\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\10\12\1\372\21\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\3\12\1\373\26\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\4\12\1\374\25\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\10\12"+
    "\1\375\21\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\14\12\1\376\15\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\10\12\1\377\21\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\14\12\1\u0100\15\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\2\12\1\u0101\1\12\1\0\1\12"+
    "\1\0\32\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\16\12\1\u0102\13\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\4\12\1\u0103\25\12\5\0\1\12"+
    "\1\0\4\12\26\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\7\12\1\u0104\22\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\10\12"+
    "\1\u0105\21\12\5\0\1\12\1\0\4\12\26\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\0\16\12\1\u0106\13\12"+
    "\5\0\1\12\1\0\4\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\10\12\1\u0107\21\12\5\0\1\12"+
    "\1\0\1\12\1\u0108\2\12\26\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\32\12\5\0\1\12\1\0\4\12"+
    "\26\0\1\12\1\0\4\12\1\0\1\12\1\0\1\u0109"+
    "\31\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\10\12\1\u010a\21\12\5\0"+
    "\1\12\1\0\4\12\26\0\1\12\1\0\4\12\1\0"+
    "\1\12\1\0\21\12\1\u010b\10\12\5\0\1\12\1\0"+
    "\4\12\26\0\1\12\1\0\4\12\1\0\1\12\1\0"+
    "\21\12\1\u010c\10\12\5\0\1\12\1\0\4\12\26\0"+
    "\1\12\1\0\4\12\1\0\1\12\1\0\7\12\1\u010d"+
    "\22\12\5\0\1\12\1\0\4\12\26\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\0\21\12\1\345\10\12\5\0"+
    "\1\12\1\0\4\12\26\0\1\12\1\0\4\12\1\0"+
    "\1\12\1\0\21\12\1\357\10\12\5\0\1\12\1\0"+
    "\4\12\26\0\1\12\1\0\4\12\1\0\1\12\1\0"+
    "\24\12\1\u010e\5\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13396];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\5\1\4\11\1\1\1\11"+
    "\10\1\4\11\1\1\1\11\2\1\1\11\20\1\1\11"+
    "\3\1\1\11\3\0\2\11\1\1\2\0\1\1\2\0"+
    "\7\11\1\1\1\11\1\1\7\11\1\0\1\1\1\0"+
    "\35\1\1\11\1\0\3\1\1\0\3\11\217\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  public char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  public int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  /** the stack of open (nested) input streams to read from */
  private java.util.Stack zzStreams = new java.util.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int zzPushbackPos;
    int yyline;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtEOF;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, int zzPushbackPos,
                  char [] zzBuffer, boolean zzAtEOF, int yyline, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzPushbackPos = zzPushbackPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private long serial = 0;

    private final StringBuilder string = new StringBuilder();
    private final StringBuilder macroName = new StringBuilder();
    
    private Token symbol(int type, String value) {
        Token t = new Symbol(type, yyline, yycolumn, value, serial);
        serial++;

        if(t == null) throw new NullPointerException();

        return t;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader, String name) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzPushbackPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos ;
    zzPushbackPos = s.zzPushbackPos;
    zzAtEOF       = s.zzAtEOF;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    zzStreams.clear();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    //System.err.println("\tEntering state " + stateNames.get(newState));
    /*Error e = new Error();
    System.err.println(e);
    System.err.println("\t at " + e.getStackTrace()[1]);*/ 
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws ScannerException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    message = message + " (" + stateNames.get(zzLexicalState) + ")";

    throw new ScannerException(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws ScannerException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextSymbol() throws java.io.IOException, ScannerException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 45: 
          { return symbol(Sym.SHIFT_RIGHT, yytext());
          }
        case 95: break;
        case 67: 
          { return symbol(Sym.CHAR, yytext());
          }
        case 96: break;
        case 44: 
          { return symbol(Sym.LESS_OR_EQUAL, yytext());
          }
        case 97: break;
        case 22: 
          { return symbol(Sym.BITWISE_OR, yytext());
          }
        case 98: break;
        case 57: 
          { return symbol(Sym.RSHIFT_ASSIGN, yytext());
          }
        case 99: break;
        case 51: 
          { return symbol(Sym.PLUS_ASSIGN, yytext());
          }
        case 100: break;
        case 30: 
          { string.setLength(0); yybegin(CHAR);
          }
        case 101: break;
        case 78: 
          { return symbol(Sym.STRUCT, yytext());
          }
        case 102: break;
        case 6: 
          { return symbol(Sym.SEMICOLON, yytext());
          }
        case 103: break;
        case 60: 
          { return symbol(Sym.INT, yytext());
          }
        case 104: break;
        case 86: 
          { return symbol(Sym.TYPEDEF, yytext());
          }
        case 105: break;
        case 65: 
          { return symbol(Sym.ENUM, yytext());
          }
        case 106: break;
        case 89: 
          { return symbol(Sym.RESTRICT, yytext());
          }
        case 107: break;
        case 12: 
          { return symbol(Sym.OPEN_P, yytext());
          }
        case 108: break;
        case 19: 
          { return symbol(Sym.GREATER_THAN, yytext());
          }
        case 109: break;
        case 92: 
          { return symbol(Sym.COMPLEX, yytext());
          }
        case 110: break;
        case 79: 
          { return symbol(Sym.SIGNED, yytext());
          }
        case 111: break;
        case 64: 
          { return symbol(Sym.ELSE, yytext());
          }
        case 112: break;
        case 93: 
          { return symbol(Sym.VOLATILE, yytext());
          }
        case 113: break;
        case 69: 
          { return symbol(Sym.VOID, yytext());
          }
        case 114: break;
        case 8: 
          { return symbol(Sym.BITWISE_AND, yytext());
          }
        case 115: break;
        case 36: 
          { return symbol(Sym.LOGICAL_AND, yytext());
          }
        case 116: break;
        case 55: 
          { return symbol(Sym.FLOAT_CONSTANT, yytext());
          }
        case 117: break;
        case 11: 
          { return symbol(Sym.BITWISE_NOT, yytext());
          }
        case 118: break;
        case 59: 
          { return symbol(Sym.ASM, yytext());
          }
        case 119: break;
        case 18: 
          { return symbol(Sym.LESS_THAN, yytext());
          }
        case 120: break;
        case 90: 
          { return symbol(Sym.REGISTER, yytext());
          }
        case 121: break;
        case 62: 
          { return symbol(Sym.LONG, yytext());
          }
        case 122: break;
        case 73: 
          { return symbol(Sym.CONST, yytext());
          }
        case 123: break;
        case 94: 
          { return symbol(Sym.IMAGINARY, yytext());
          }
        case 124: break;
        case 71: 
          { return symbol(Sym.UNION, yytext());
          }
        case 125: break;
        case 14: 
          { return symbol(Sym.QUESTION_MARK, yytext());
          }
        case 126: break;
        case 68: 
          { return symbol(Sym.GOTO, yytext());
          }
        case 127: break;
        case 54: 
          { return symbol(Sym.DO, yytext());
          }
        case 128: break;
        case 17: 
          { return symbol(Sym.MOD, yytext());
          }
        case 129: break;
        case 25: 
          { return symbol(Sym.OPEN_S, yytext());
          }
        case 130: break;
        case 27: 
          { return symbol(Sym.OPEN_B, yytext());
          }
        case 131: break;
        case 63: 
          { return symbol(Sym.AUTO, yytext());
          }
        case 132: break;
        case 77: 
          { return symbol(Sym.STATIC, yytext());
          }
        case 133: break;
        case 29: 
          { string.setLength(0);  yybegin(STRING);
          }
        case 134: break;
        case 10: 
          { return symbol(Sym.LOGICAL_NOT, yytext());
          }
        case 135: break;
        case 13: 
          { return symbol(Sym.CLOSE_P, yytext());
          }
        case 136: break;
        case 80: 
          { return symbol(Sym.SIZEOF, yytext());
          }
        case 137: break;
        case 24: 
          { return symbol(Sym.DOT, yytext());
          }
        case 138: break;
        case 41: 
          { return symbol(Sym.NOT_EQUALS, yytext());
          }
        case 139: break;
        case 15: 
          { return symbol(Sym.COLON, yytext());
          }
        case 140: break;
        case 58: 
          { return symbol(Sym.VARARGS, yytext());
          }
        case 141: break;
        case 32: 
          { return symbol(Sym.STRING, string.toString());
          }
        case 142: break;
        case 38: 
          { return symbol(Sym.DECREMENT, yytext());
          }
        case 143: break;
        case 35: 
          { return symbol(Sym.MULT_ASSIGN, yytext());
          }
        case 144: break;
        case 4: 
          { return symbol(Sym.ASTERISK, yytext());
          }
        case 145: break;
        case 91: 
          { return symbol(Sym.CONTINUE, yytext());
          }
        case 146: break;
        case 46: 
          { return symbol(Sym.GREATER_OR_EQUAL, yytext());
          }
        case 147: break;
        case 21: 
          { return symbol(Sym.BITWISE_XOR, yytext());
          }
        case 148: break;
        case 61: 
          { return symbol(Sym.FOR, yytext());
          }
        case 149: break;
        case 39: 
          { return symbol(Sym.POINTS_TO, yytext());
          }
        case 150: break;
        case 48: 
          { return symbol(Sym.XOR_ASSIGN, yytext());
          }
        case 151: break;
        case 50: 
          { return symbol(Sym.LOGICAL_OR, yytext());
          }
        case 152: break;
        case 26: 
          { return symbol(Sym.CLOSE_S, yytext());
          }
        case 153: break;
        case 28: 
          { return symbol(Sym.CLOSE_B, yytext());
          }
        case 154: break;
        case 40: 
          { return symbol(Sym.SUB_ASSIGN, yytext());
          }
        case 155: break;
        case 70: 
          { return symbol(Sym.SHORT, yytext());
          }
        case 156: break;
        case 3: 
          { return symbol(Sym.SLASH, yytext());
          }
        case 157: break;
        case 87: 
          { return symbol(Sym.DEFAULT, yytext());
          }
        case 158: break;
        case 1: 
          { throw new ScannerException("Can't match " + yytext() + " in " + stateNames.get(zzLexicalState));
          }
        case 159: break;
        case 43: 
          { return symbol(Sym.SHIFT_LEFT, yytext());
          }
        case 160: break;
        case 81: 
          { return symbol(Sym.SWITCH, yytext());
          }
        case 161: break;
        case 85: 
          { return symbol(Sym.DOUBLE, yytext());
          }
        case 162: break;
        case 34: 
          { return symbol(Sym.DIV_ASSIGN, yytext());
          }
        case 163: break;
        case 37: 
          { return symbol(Sym.AND_ASSIGN, yytext());
          }
        case 164: break;
        case 53: 
          { return symbol(Sym.IF, yytext());
          }
        case 165: break;
        case 7: 
          { return symbol(Sym.IDENTIFIER, yytext());
          }
        case 166: break;
        case 76: 
          { return symbol(Sym.WHILE, yytext());
          }
        case 167: break;
        case 83: 
          { return symbol(Sym.EXTERN, yytext());
          }
        case 168: break;
        case 23: 
          { return symbol(Sym.PLUS, yytext());
          }
        case 169: break;
        case 75: 
          { return symbol(Sym.BOOL, yytext());
          }
        case 170: break;
        case 72: 
          { return symbol(Sym.BREAK, yytext());
          }
        case 171: break;
        case 84: 
          { /*return symbol(Sym.INLINE, yytext());*/
          }
        case 172: break;
        case 47: 
          { return symbol(Sym.EQUALS, yytext());
          }
        case 173: break;
        case 5: 
          { return symbol(Sym.INT_CONSTANT, yytext());
          }
        case 174: break;
        case 66: 
          { return symbol(Sym.CASE, yytext());
          }
        case 175: break;
        case 56: 
          { return symbol(Sym.LSHIFT_ASSIGN, yytext());
          }
        case 176: break;
        case 88: 
          { return symbol(Sym.UNSIGNED, yytext());
          }
        case 177: break;
        case 9: 
          { return symbol(Sym.MINUS, yytext());
          }
        case 178: break;
        case 16: 
          { return symbol(Sym.COMMA, yytext());
          }
        case 179: break;
        case 31: 
          { string.append( yytext() );
          }
        case 180: break;
        case 82: 
          { return symbol(Sym.RETURN, yytext());
          }
        case 181: break;
        case 52: 
          { return symbol(Sym.INCREMENT, yytext());
          }
        case 182: break;
        case 49: 
          { return symbol(Sym.OR_ASSIGN, yytext());
          }
        case 183: break;
        case 74: 
          { return symbol(Sym.FLOAT, yytext());
          }
        case 184: break;
        case 33: 
          { return symbol(Sym.CHAR_CONSTANT, string.toString());
          }
        case 185: break;
        case 42: 
          { return symbol(Sym.MOD_ASSIGN, yytext());
          }
        case 186: break;
        case 20: 
          { return symbol(Sym.ASSIGN, yytext());
          }
        case 187: break;
        case 2: 
          { 
          }
        case 188: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(Sym.PARSER_EOF, null);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
