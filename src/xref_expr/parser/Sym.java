package xref_expr.parser;

public class Sym {
    public static final int PARSER_EOF = 0;
    public static final int ASTERISK = 1;
    public static final int LOGICAL_AND = 2;
    public static final int MINUS = 3;
    public static final int LOGICAL_NOT = 4;
    public static final int LOGICAL_OR = 5;
    public static final int OPEN_P = 6;
    public static final int CLOSE_P = 7;
    public static final int QUESTION_MARK = 8;
    public static final int COLON = 9;
    public static final int COMMA = 10;
    public static final int SLASH = 11;
    public static final int MOD = 12;
    public static final int SHIFT_LEFT = 13;
    public static final int SHIFT_RIGHT = 14;
    public static final int LESS_THAN = 15;
    public static final int GREATER_THAN = 16;
    public static final int LESS_OR_EQUAL = 17;
    public static final int GREATER_OR_EQUAL = 18;
    public static final int EQUALS = 19;
    public static final int NOT_EQUALS = 20;
    public static final int BITWISE_XOR = 21;
    public static final int BITWISE_OR = 22;
    public static final int BITWISE_AND = 23;
    public static final int BITWISE_NOT = 24;
    public static final int PLUS = 25;
    public static final int VARARGS = 26;
    public static final int SEMICOLON = 27;
    public static final int OPEN_S = 28;
    public static final int CLOSE_S = 29;
    public static final int OPEN_B = 30;
    public static final int CLOSE_B = 31;
    public static final int ASSIGN = 32;
    public static final int MULT_ASSIGN = 33;
    public static final int DIV_ASSIGN = 34;
    public static final int MOD_ASSIGN = 35;
    public static final int PLUS_ASSIGN = 36;
    public static final int INCREMENT = 37;
    public static final int SUB_ASSIGN = 38;
    public static final int DECREMENT = 39;
    public static final int POINTS_TO = 40;
    public static final int AND_ASSIGN = 41;
    public static final int XOR_ASSIGN = 42;
    public static final int OR_ASSIGN = 43;
    public static final int DOT = 44;
    public static final int LSHIFT_ASSIGN = 45;
    public static final int RSHIFT_ASSIGN = 46;
    public static final int TYPE_NAME = 47;
    public static final int STRINGIZE = 48;
    public static final int TOKEN_PASTE = 49;
    public static final int ASM = 50;
    public static final int AUTO = 51;
    public static final int BREAK = 52;
    public static final int CASE = 53;
    public static final int CHAR = 54;
    public static final int CONST = 55;
    public static final int CONTINUE = 56;
    public static final int DEFAULT = 57;
    public static final int DO = 58;
    public static final int DOUBLE = 59;
    public static final int ELSE = 60;
    public static final int ENUM = 61;
    public static final int EXTERN = 62;
    public static final int FLOAT = 63;
    public static final int FOR = 64;
    public static final int GOTO = 65;
    public static final int IF = 66;
    public static final int INLINE = 67;
    public static final int INT = 68;
    public static final int LONG = 69;
    public static final int REGISTER = 70;
    public static final int RESTRICT = 71;
    public static final int RETURN = 72;
    public static final int SHORT = 73;
    public static final int SIGNED = 74;
    public static final int SIZEOF = 75;
    public static final int STATIC = 76;
    public static final int STRUCT = 77;
    public static final int SWITCH = 78;
    public static final int TYPEDEF = 79;
    public static final int UNION = 80;
    public static final int UNSIGNED = 81;
    public static final int VOID = 82;
    public static final int VOLATILE = 83;
    public static final int WHILE = 84;
    public static final int BOOL = 85;
    public static final int COMPLEX = 86;
    public static final int IMAGINARY = 87;
    public static final int IDENTIFIER = 88;
    public static final int INT_CONSTANT = 89;
    public static final int FLOAT_CONSTANT = 90;
    public static final int CHAR_CONSTANT = 91;
    public static final int STRING = 92;
    public static final int expr = 93;
    public static final int add_expr = 94;
    public static final int var_expr = 95;

public static String symToString(int sym) {
        switch(sym) {
            case PARSER_EOF: return "PARSER_EOF";
            case ASTERISK: return "ASTERISK";
            case LOGICAL_AND: return "LOGICAL_AND";
            case MINUS: return "MINUS";
            case LOGICAL_NOT: return "LOGICAL_NOT";
            case LOGICAL_OR: return "LOGICAL_OR";
            case OPEN_P: return "OPEN_P";
            case CLOSE_P: return "CLOSE_P";
            case QUESTION_MARK: return "QUESTION_MARK";
            case COLON: return "COLON";
            case COMMA: return "COMMA";
            case SLASH: return "SLASH";
            case MOD: return "MOD";
            case SHIFT_LEFT: return "SHIFT_LEFT";
            case SHIFT_RIGHT: return "SHIFT_RIGHT";
            case LESS_THAN: return "LESS_THAN";
            case GREATER_THAN: return "GREATER_THAN";
            case LESS_OR_EQUAL: return "LESS_OR_EQUAL";
            case GREATER_OR_EQUAL: return "GREATER_OR_EQUAL";
            case EQUALS: return "EQUALS";
            case NOT_EQUALS: return "NOT_EQUALS";
            case BITWISE_XOR: return "BITWISE_XOR";
            case BITWISE_OR: return "BITWISE_OR";
            case BITWISE_AND: return "BITWISE_AND";
            case BITWISE_NOT: return "BITWISE_NOT";
            case PLUS: return "PLUS";
            case VARARGS: return "VARARGS";
            case SEMICOLON: return "SEMICOLON";
            case OPEN_S: return "OPEN_S";
            case CLOSE_S: return "CLOSE_S";
            case OPEN_B: return "OPEN_B";
            case CLOSE_B: return "CLOSE_B";
            case ASSIGN: return "ASSIGN";
            case MULT_ASSIGN: return "MULT_ASSIGN";
            case DIV_ASSIGN: return "DIV_ASSIGN";
            case MOD_ASSIGN: return "MOD_ASSIGN";
            case PLUS_ASSIGN: return "PLUS_ASSIGN";
            case INCREMENT: return "INCREMENT";
            case SUB_ASSIGN: return "SUB_ASSIGN";
            case DECREMENT: return "DECREMENT";
            case POINTS_TO: return "POINTS_TO";
            case AND_ASSIGN: return "AND_ASSIGN";
            case XOR_ASSIGN: return "XOR_ASSIGN";
            case OR_ASSIGN: return "OR_ASSIGN";
            case DOT: return "DOT";
            case LSHIFT_ASSIGN: return "LSHIFT_ASSIGN";
            case RSHIFT_ASSIGN: return "RSHIFT_ASSIGN";
            case TYPE_NAME: return "TYPE_NAME";
            case STRINGIZE: return "STRINGIZE";
            case TOKEN_PASTE: return "TOKEN_PASTE";
            case ASM: return "ASM";
            case AUTO: return "AUTO";
            case BREAK: return "BREAK";
            case CASE: return "CASE";
            case CHAR: return "CHAR";
            case CONST: return "CONST";
            case CONTINUE: return "CONTINUE";
            case DEFAULT: return "DEFAULT";
            case DO: return "DO";
            case DOUBLE: return "DOUBLE";
            case ELSE: return "ELSE";
            case ENUM: return "ENUM";
            case EXTERN: return "EXTERN";
            case FLOAT: return "FLOAT";
            case FOR: return "FOR";
            case GOTO: return "GOTO";
            case IF: return "IF";
            case INLINE: return "INLINE";
            case INT: return "INT";
            case LONG: return "LONG";
            case REGISTER: return "REGISTER";
            case RESTRICT: return "RESTRICT";
            case RETURN: return "RETURN";
            case SHORT: return "SHORT";
            case SIGNED: return "SIGNED";
            case SIZEOF: return "SIZEOF";
            case STATIC: return "STATIC";
            case STRUCT: return "STRUCT";
            case SWITCH: return "SWITCH";
            case TYPEDEF: return "TYPEDEF";
            case UNION: return "UNION";
            case UNSIGNED: return "UNSIGNED";
            case VOID: return "VOID";
            case VOLATILE: return "VOLATILE";
            case WHILE: return "WHILE";
            case BOOL: return "BOOL";
            case COMPLEX: return "COMPLEX";
            case IMAGINARY: return "IMAGINARY";
            case IDENTIFIER: return "IDENTIFIER";
            case INT_CONSTANT: return "INT_CONSTANT";
            case FLOAT_CONSTANT: return "FLOAT_CONSTANT";
            case CHAR_CONSTANT: return "CHAR_CONSTANT";
            case STRING: return "STRING";
            case expr: return "<expr>";
            case add_expr: return "<add_expr>";
            case var_expr: return "<var_expr>";
        }
        throw new Error("Unrecognized symbol number " + sym);
    }
}
